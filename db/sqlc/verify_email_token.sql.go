// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: verify_email_token.sql

package db

import (
	"context"
	"time"
)

const createEmailVerifyToken = `-- name: CreateEmailVerifyToken :one
INSERT INTO email_verification_tokens (
    username,
    token,
    expires_at 
) VALUES (
    $1, $2, $3
)
RETURNING id, username, token, created_at, expires_at, used_at, is_verified
`

type CreateEmailVerifyTokenParams struct {
	Username  string    `json:"username"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateEmailVerifyToken(ctx context.Context, arg CreateEmailVerifyTokenParams) (EmailVerificationToken, error) {
	row := q.db.QueryRowContext(ctx, createEmailVerifyToken, arg.Username, arg.Token, arg.ExpiresAt)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.IsVerified,
	)
	return i, err
}

const getActiveEmailVerifyToken = `-- name: GetActiveEmailVerifyToken :one
SELECT id, username, token, created_at, expires_at, used_at, is_verified 
FROM email_verification_tokens
WHERE token = $1
  AND used_at IS NULL
  AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) GetActiveEmailVerifyToken(ctx context.Context, token string) (EmailVerificationToken, error) {
	row := q.db.QueryRowContext(ctx, getActiveEmailVerifyToken, token)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.IsVerified,
	)
	return i, err
}

const getEmailVerifyToken = `-- name: GetEmailVerifyToken :one
SELECT id, username, token, created_at, expires_at, used_at, is_verified FROM email_verification_tokens
WHERE token = $1 LIMIT 1
`

func (q *Queries) GetEmailVerifyToken(ctx context.Context, token string) (EmailVerificationToken, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerifyToken, token)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.IsVerified,
	)
	return i, err
}

const isUserEmailVerified = `-- name: IsUserEmailVerified :one
SELECT EXISTS (
    SELECT 1
    FROM email_verification_tokens
    WHERE username = $1
        AND is_verified = true
)
`

func (q *Queries) IsUserEmailVerified(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserEmailVerified, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateEmailVerifyToken = `-- name: UpdateEmailVerifyToken :exec
UPDATE email_verification_tokens
SET
    used_at= NOW(),
    is_verified=true
WHERE
    token = $1
`

func (q *Queries) UpdateEmailVerifyToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, updateEmailVerifyToken, token)
	return err
}
